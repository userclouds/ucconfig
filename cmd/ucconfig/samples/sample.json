{
  "resources": [
    {
      "uc_terraform_type": "userstore_column",
      "manifest_id": "userstore_column_email_verified",
      "resource_uuids": {
        "__DEFAULT": "12b3f133-4ad1-4f11-9d7d-313eb7cb95fa",
        "dev": "12b3f133-4ad1-4f11-9d7d-313eb7cb95fa"
      },
      "attributes": {
        "index_type": "none",
        "is_array": false,
        "name": "email_verified",
        "type": "boolean"
      }
    },
    {
      "uc_terraform_type": "userstore_column",
      "manifest_id": "userstore_column_email",
      "resource_uuids": {
        "__DEFAULT": "2c7a7c9b-90e8-47e4-8f6e-ec73bd2dec16",
        "dev": "2c7a7c9b-90e8-47e4-8f6e-ec73bd2dec16"
      },
      "attributes": {
        "index_type": "indexed",
        "is_array": false,
        "name": "email",
        "type": "string"
      }
    },
    {
      "uc_terraform_type": "userstore_column",
      "manifest_id": "userstore_column_external_alias",
      "resource_uuids": {
        "__DEFAULT": "2ee3d57d-9756-464e-a5e9-04244936cb9e",
        "dev": "2ee3d57d-9756-464e-a5e9-04244936cb9e"
      },
      "attributes": {
        "index_type": "unique",
        "is_array": false,
        "name": "external_alias",
        "type": "string"
      }
    },
    {
      "uc_terraform_type": "userstore_column",
      "manifest_id": "userstore_column_picture",
      "resource_uuids": {
        "__DEFAULT": "4d4d0757-3bc2-424d-9caf-a930edb49b69",
        "dev": "4d4d0757-3bc2-424d-9caf-a930edb49b69"
      },
      "attributes": {
        "index_type": "none",
        "is_array": false,
        "name": "picture",
        "type": "string"
      }
    },
    {
      "uc_terraform_type": "userstore_column",
      "manifest_id": "userstore_column_nickname",
      "resource_uuids": {
        "__DEFAULT": "83cc42b0-da8c-4a61-9db1-da70f21bab60",
        "dev": "83cc42b0-da8c-4a61-9db1-da70f21bab60"
      },
      "attributes": {
        "index_type": "none",
        "is_array": false,
        "name": "nickname",
        "type": "string"
      }
    },
    {
      "uc_terraform_type": "userstore_column",
      "manifest_id": "userstore_column_testcol",
      "resource_uuids": {
        "__DEFAULT": "962cb438-f0c4-42a7-9bf0-4dab3a62e3c7",
        "dev": "962cb438-f0c4-42a7-9bf0-4dab3a62e3c7"
      },
      "attributes": {
        "index_type": "none",
        "is_array": false,
        "name": "testcol",
        "type": "string"
      }
    },
    {
      "uc_terraform_type": "userstore_column",
      "manifest_id": "userstore_column_name",
      "resource_uuids": {
        "__DEFAULT": "fe20fd48-a006-4ad8-9208-4aad540d8794",
        "dev": "fe20fd48-a006-4ad8-9208-4aad540d8794"
      },
      "attributes": {
        "index_type": "indexed",
        "is_array": false,
        "name": "name",
        "type": "string"
      }
    },
    {
      "uc_terraform_type": "userstore_column_post_delete_retention_duration",
      "manifest_id": "13b72662-8ce2-4e69-8818-74a81675d2b7",
      "resource_uuids": {
        "__DEFAULT": "13b72662-8ce2-4e69-8818-74a81675d2b7",
        "dev": "13b72662-8ce2-4e69-8818-74a81675d2b7"
      },
      "attributes": {
        "column_id": "@UC_MANIFEST_ID(\"userstore_column_testcol\").id",
        "duration": {
          "duration": 5,
          "unit": "day"
        },
        "duration_type": "postdelete",
        "purpose_id": "@UC_SYSTEM_OBJECT(\"userstore_purpose\", \"operational\")",
        "type": "column"
      }
    },
    {
      "uc_terraform_type": "access_policy_template",
      "manifest_id": "access_policy_template_AllowAll",
      "resource_uuids": {
        "__DEFAULT": "1e742248-fdde-4c88-9ea7-2c2106ec7aa8",
        "dev": "1e742248-fdde-4c88-9ea7-2c2106ec7aa8"
      },
      "attributes": {
        "description": "This template allows all access.",
        "function": "function policy(context, params) {\n\t\treturn true;\n\t}",
        "name": "AllowAll"
      }
    },
    {
      "uc_terraform_type": "access_policy_template",
      "manifest_id": "access_policy_template_CheckAttribute",
      "resource_uuids": {
        "__DEFAULT": "aad2bf25-311f-467e-9169-a6a89b6d34a6",
        "dev": "aad2bf25-311f-467e-9169-a6a89b6d34a6"
      },
      "attributes": {
        "description": "This template returns the value of checkAttribute on the given parameters.",
        "function": "function policy(context, params) {\n\t\tconst id1 = params.userIDUsage === \"id1\" ? context.user.id : params.id1;\n\t\tconst id2 = params.userIDUsage === \"id2\" ? context.user.id : params.id2;\n\t\tconst attribute = params.attribute;\n\t\tif (!id1 || !id2 || !attribute) {\n\t\t\treturn false;\n\t\t}\n\t\treturn checkAttribute(id1, id2, attribute);\n\t}",
        "name": "CheckAttribute"
      }
    },
    {
      "uc_terraform_type": "transformer",
      "manifest_id": "transformer_EmailToID",
      "resource_uuids": {
        "__DEFAULT": "0cedf7a4-86ab-450a-9426-478ad0a60faa",
        "dev": "0cedf7a4-86ab-450a-9426-478ad0a60faa"
      },
      "attributes": {
        "description": "This policy generates an email token for the given email.",
        "function": "function id(len) {\n\tvar s = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n\n\treturn Array(len).join().split(',').map(function() {\n\t\treturn s.charAt(Math.floor(Math.random() * s.length));\n\t}).join('');\n}\n\nvar commonValues = [\"gmail\", \"hotmail\", \"yahoo\", \"msn\", \"aol\", \"orange\", \"wanadoo\", \"comcast\", \"live\", \"apple\", \"proton\", \"yandex\", \"ymail\"]\n\nfunction constructSegment(seg, config) {\n\tif (config.PreserveValue) {\n\t\treturn seg\n\t}\n\n\tif (config.PreserveCommonValue \u0026\u0026 (commonValues.includes(seg))) {\n\t\treturn seg\n\t}\n\n\tpreserveCount = Math.min(config.PreserveChars, seg.length);\n\tnewSeg = seg.slice(0, preserveCount)\n\treturn newSeg + id(config.FinalLength - preserveCount)\n}\n\nfunction transform(data, params) {\n\temailParts = data.split('@')\n\n\t// Make sure we have a username and a domain\n\tif (emailParts.length !== 2) {\n\t\tthrow new Error('Invalid Data');\n\t}\n\n\tusername = emailParts[0]\n\tdomainParts = emailParts[1].split('.')\n\n\t// Check if the domain is valid\n\tif (domainParts.length \u003c 2) {\n\t\tthrow new Error('Invalid Data');\n\t}\n\tdomainName = domainParts[0]\n\tdomainExt = domainParts[1]\n\n\tif (params.length != 3) {\n\t\tthrow new Error('Invalid Params');\n\t}\n\treturn constructSegment(username, params[0]) + '@' +\n\t\tconstructSegment(domainName, params[1]) + '.' +\n\t\tconstructSegment(domainExt, params[2]);\n};",
        "input_type": "string",
        "name": "EmailToID",
        "parameters": "[{\n\t\"PreserveValue\": false,\n\t\"PreserveChars\": 0,\n\t\"FinalLength\": 12\n}, {\n\t\"PreserveValue\": false,\n\t\"PreserveCommonValue\": true,\n\t\"PreserveChars\": 0,\n\t\"FinalLength\": 6\n}, {\n\t\"PreserveValue\": true\n}]",
        "transform_type": "tokenizebyvalue"
      }
    },
    {
      "uc_terraform_type": "transformer",
      "manifest_id": "transformer_SSNToID",
      "resource_uuids": {
        "__DEFAULT": "3f65ee22-2241-4694-bbe3-72cefbe59ff2",
        "dev": "3f65ee22-2241-4694-bbe3-72cefbe59ff2"
      },
      "attributes": {
        "description": "This policy generates a masked SSN.",
        "function": "function id(len, decimalonly) {\n\tvar s = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n\tvar d = \"0123456789\";\n\tif (decimalonly) {\n\t\treturn Array(len).join().split(',').map(function() {\n\t\t\treturn d.charAt(Math.floor(Math.random() * d.length));\n\t\t}).join('');\n\t}\n\treturn Array(len).join().split(',').map(function() {\n\t\treturn s.charAt(Math.floor(Math.random() * s.length));\n\t}).join('');\n}\n\nfunction constructSegment(seg, decimalonly, preserveS, preserveT) {\n\tpreserveCountS = Math.min(Math.max(preserveS, 0), seg.length);\n\tpreserveCountT = Math.min(Math.max(preserveT, 0), seg.length);\n\n\tpreserveCount = preserveCountS + preserveCountT\n\tif (preserveCount \u003e= seg.length) {\n\t\treturn seg\n\t}\n\n\tnewSegS = seg.slice(0, preserveCountS)\n\tnewSegT = seg.slice(seg.length - preserveCountT, seg.length)\n\treturn newSegS + id(seg.length - preserveCount, decimalonly) + newSegT;\n}\n\nfunction validate(str) {\n\tregexp = /^(?!000|666)[0-8][0-9]{2}(?!00)[0-9]{2}(?!0000)[0-9]{4}$/;\n\n\treturn regexp.test(str);\n}\n\nfunction transform(data, params) {\n\t// Strip non numeric characters if present\n\torig_data = data;\n\tdata = data.replace(/\\D/g, '');\n\tif (!validate(data)) {\n\t\tthrow new Error('Invalid SSN Provided');\n\t}\n\n\tif ((params.PreserveCharsTrailing + params.PreserveCharsStart) \u003e 9 ||\n\t\tparams.PreserveCharsTrailing \u003c 0 || params.PreserveCharsStart \u003c 0) {\n\t\tthrow new Error('Invalid Params Provided');\n\t}\n\n\tif (params.PreserveValue) {\n\t\treturn orig_data;\n\t}\n\n\tseg1 = data.slice(0, 3);\n\tseg2 = data.slice(3, 5);\n\tseg3 = data.slice(5, 9);\n\treturn constructSegment(\n\t\t\tseg1,\n\t\t\tparams.DecimalOnly,\n\t\t\tparams.PreserveCharsStart,\n\t\t\tparams.PreserveCharsTrailing - 6\n\t\t) +\n\t\t'-' +\n\t\tconstructSegment(\n\t\t\tseg2,\n\t\t\tparams.DecimalOnly,\n\t\t\tparams.PreserveCharsStart - 3,\n\t\t\tparams.PreserveCharsTrailing - 4\n\t\t) +\n\t\t'-' +\n\t\tconstructSegment(\n\t\t\tseg3,\n\t\t\tparams.DecimalOnly,\n\t\t\tparams.PreserveCharsStart - 5,\n\t\t\tparams.PreserveCharsTrailing\n\t\t);\n};",
        "input_type": "string",
        "name": "SSNToID",
        "parameters": "{\n\t\"PreserveValue\": false,\n\t\"DecimalOnly\": true,\n\t\"PreserveCharsTrailing\": 0,\n\t\"PreserveCharsStart\": 3\n}",
        "transform_type": "transform"
      }
    },
    {
      "uc_terraform_type": "transformer",
      "manifest_id": "transformer_CreditCardToID",
      "resource_uuids": {
        "__DEFAULT": "618a4ae7-9979-4ee8-bac5-db87335fe4d9",
        "dev": "618a4ae7-9979-4ee8-bac5-db87335fe4d9"
      },
      "attributes": {
        "description": "This policy generates a masked credit card number.",
        "function": "\nfunction id(len, decimalonly) {\n\tvar s = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n\tvar d = \"0123456789\";\n\n\tif (decimalonly) {\n\t\treturn Array(len).join().split(',').map(function() {\n\t\t\treturn d.charAt(Math.floor(Math.random() * d.length));\n\t\t}).join('');\n\t}\n\n\treturn Array(len).join().split(',').map(function() {\n\t\treturn s.charAt(Math.floor(Math.random() * s.length));\n\t}).join('');\n}\n\nfunction constructSegment(seg, decimalonly, preserveS, preserveT) {\n\tpreserveCountS = Math.min(Math.max(preserveS, 0), seg.length);\n\tpreserveCountT = Math.min(Math.max(preserveT, 0), seg.length);\n\n\tpreserveCount = preserveCountS + preserveCountT\n\tif (preserveCount \u003e= seg.length) {\n\t\treturn seg\n\t}\n\n\tnewSegS = seg.slice(0, preserveCountS)\n\tnewSegT = seg.slice(seg.length - preserveCountT, seg.length)\n\treturn newSegS + id(seg.length - preserveCount, decimalonly) + newSegT;\n}\n\nfunction validate(str) {\n\t// there a lot of different regexes per type of card\n\t// for now just test the length\n\treturn (str.length == 16);\n}\n\nfunction transform(data, params) {\n\t// Strip non numeric characters if present\n\torig_data = data;\n\tdata = data.replace(/\\D/g, '');\n\tif (!validate(data)) {\n\t\tthrow new Error('Invalid Credit Card Number Provided');\n\t}\n\n\tif ((params.PreserveCharsTrailing + params.PreserveCharsStart) \u003e 9 ||\n\t\tparams.PreserveCharsTrailing \u003c 0 ||\n\t\tparams.PreserveCharsStart \u003c 0) {\n\t\tthrow new Error('Invalid Params Provided');\n\t}\n\n\tif (params.PreserveValue) {\n\t\treturn orig_data;\n\t}\n\n\tseg1 = data.slice(0, 4);\n\tseg2 = data.slice(4, 8);\n\tseg3 = data.slice(8, 12);\n\tseg4 = data.slice(12, 16);\n\treturn constructSegment(\n\t\t\tseg1,\n\t\t\tparams.DecimalOnly,\n\t\t\tparams.PreserveCharsStart,\n\t\t\tparams.PreserveCharsTrailing - 12\n\t\t) +\n\t\t'-' +\n\t\tconstructSegment(\n\t\t\tseg2,\n\t\t\tparams.DecimalOnly,\n\t\t\tparams.PreserveCharsStart - 4,\n\t\t\tparams.PreserveCharsTrailing - 8\n\t\t) +\n\t\t'-' +\n\t\tconstructSegment(seg3,\n\t\t\tparams.DecimalOnly,\n\t\t\tparams.PreserveCharsStart - 8,\n\t\t\tparams.PreserveCharsTrailing - 4\n\t\t) +\n\t\t\t'-' +\n\t\tconstructSegment(\n\t\t\tseg4,\n\t\t\tparams.DecimalOnly,\n\t\t\tparams.PreserveCharsStart - 12,\n\t\t\tparams.PreserveCharsTrailing\n\t\t);\n};",
        "input_type": "string",
        "name": "CreditCardToID",
        "parameters": "{\n\t\"PreserveValue\": false,\n\t\"DecimalOnly\": true,\n\t\"PreserveCharsTrailing\": 0,\n\t\"PreserveCharsStart\": 0\n}",
        "transform_type": "transform"
      }
    },
    {
      "uc_terraform_type": "transformer",
      "manifest_id": "transformer_FullNameToID",
      "resource_uuids": {
        "__DEFAULT": "b9bf352f-b1ee-4fb2-a2eb-d0c346c6404b",
        "dev": "b9bf352f-b1ee-4fb2-a2eb-d0c346c6404b"
      },
      "attributes": {
        "description": "This policy generates a masked name.",
        "function": "function id(len) {\n\tvar s = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n\treturn Array(len).join().split(',').map(function() {\n\t\treturn s.charAt(Math.floor(Math.random() * s.length));\n\t}).join('');\n}\n\nfunction constructSegment(seg, config) {\n\tif (config.PreserveValue) {\n\t\treturn seg\n\t}\n\tpreserveCount = Math.min(config.PreserveChars, seg.length);\n\tnewSeg = seg.slice(0, preserveCount)\n\treturn newSeg + id(config.FinalLength - preserveCount)\n}\n\nfunction transform(data, params) {\n\tnameParts = data.split(' ')\n\n\t// Assume that if we have a single name, treat it as a first name\n\tfirstName = data;\n\tlastName = \"\";\n\tif (nameParts.length \u003e 0) {\n\t\tfirstName = nameParts[0]\n\t}\n\n\t// Skip middle name if provided\n\tif (nameParts.length \u003e 1) {\n\t\tlastName = nameParts[nameParts.length - 1]\n\t}\n\n\tif (params.length != 2) {\n\t\tthrow new Error('Invalid Params');\n\t}\n\n\treturn constructSegment(firstName, params[0]) + ' ' +\n\t\tconstructSegment(lastName, params[1]);\n};",
        "input_type": "string",
        "name": "FullNameToID",
        "parameters": "[{\n\t\"PreserveValue\": true\n}, {\n\t\"PreserveValue\": false,\n\t\"PreserveChars\": 1,\n\t\"FinalLength\": 12\n}]",
        "transform_type": "transform"
      }
    },
    {
      "uc_terraform_type": "transformer",
      "manifest_id": "transformer_UUID",
      "resource_uuids": {
        "__DEFAULT": "e3743f5b-521e-4305-b232-ee82549e1477",
        "dev": "e3743f5b-521e-4305-b232-ee82549e1477"
      },
      "attributes": {
        "description": "This policy generates a UUID token for the data.",
        "function": "function uuidv4() {\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n\t\tvar r = Math.random() * 16 | 0, v = c === 'x' ? r : ((r \u0026 0x3) | 0x8);\n\t\treturn v.toString(16);\n\t});\n};\n\nfunction transform(data, params) {\n\treturn JSON.stringify(uuidv4());\n};",
        "input_type": "string",
        "name": "UUID",
        "parameters": "{}",
        "transform_type": "tokenizebyvalue"
      }
    }
  ]
}